/**
 * Script de seed pour ajouter les permissions CATEGORIES
 * √Ä ex√©cuter apr√®s la cr√©ation de la base de donn√©es
 */

const { Permission, Role, RolePermission } = require('../models');
const { sequelize } = require('../config/sequelize');

async function seedCategoryPermissions() {
  try {
    console.log('üå± D√©but du seed des permissions Categories...');

    // Connexion √† la base de donn√©es
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // Permissions √† cr√©er
    const categoryPermissions = [
      {
        name: 'CATEGORIES_VIEW',
        description: 'Voir les cat√©gories'
      },
      {
        name: 'CATEGORIES_CREATE',
        description: 'Cr√©er des cat√©gories'
      },
      {
        name: 'CATEGORIES_UPDATE',
        description: 'Modifier des cat√©gories'
      },
      {
        name: 'CATEGORIES_DELETE',
        description: 'Supprimer des cat√©gories'
      }
    ];

    // Cr√©er les permissions (ignore si elles existent d√©j√†)
    for (const permData of categoryPermissions) {
      const [permission, created] = await Permission.findOrCreate({
        where: { name: permData.name },
        defaults: permData
      });

      if (created) {
        console.log(`‚úÖ Permission cr√©√©e: ${permData.name}`);
      } else {
        console.log(`‚ÑπÔ∏è  Permission existe d√©j√†: ${permData.name}`);
      }
    }

    // R√©cup√©rer le r√¥le Administrateur
    const adminRole = await Role.findOne({ where: { name: 'Administrateur' } });
    
    if (adminRole) {
      console.log(`\nüìã Attribution des permissions au r√¥le Administrateur...`);

      // R√©cup√©rer toutes les permissions CATEGORIES cr√©√©es
      const permissionNames = categoryPermissions.map(p => p.name);
      const permissions = await Permission.findAll({
        where: { 
          name: permissionNames
        }
      });

      // Attribuer toutes les permissions au r√¥le admin
      for (const permission of permissions) {
        const [rolePermission, created] = await RolePermission.findOrCreate({
          where: {
            roleId: adminRole.id,
            permissionId: permission.id
          }
        });

        if (created) {
          console.log(`‚úÖ Permission ${permission.name} attribu√©e √† Administrateur`);
        } else {
          console.log(`‚ÑπÔ∏è  Permission ${permission.name} d√©j√† attribu√©e √† Administrateur`);
        }
      }
    } else {
      console.log('‚ö†Ô∏è  R√¥le Administrateur non trouv√©');
    }

    console.log('\nüéâ Seed des permissions Categories termin√© avec succ√®s!');
    console.log('\nüìä R√©sum√©:');
    console.log(`   - ${categoryPermissions.length} permissions CATEGORIES cr√©√©es/v√©rifi√©es`);
    if (adminRole) {
      console.log(`   - Permissions attribu√©es au r√¥le Administrateur`);
    }

    process.exit(0);

  } catch (error) {
    console.error('‚ùå Erreur lors du seed:', error);
    process.exit(1);
  }
}

// Ex√©cuter le seed
seedCategoryPermissions();
